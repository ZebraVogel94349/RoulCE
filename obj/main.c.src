	section	.text,"ax",@progbits
	assume	adl = 1
	section	.text,"ax",@progbits
	public	_DrawTitle
_DrawTitle:
	ld	hl, -2
	push	hl
	call	_gfx_SetTextFGColor
	pop	hl
	ld	hl, 1
	push	hl
	push	hl
	call	_gfx_SetTextScale
	pop	hl
	pop	hl
	ld	hl, 10
	push	hl
	ld	hl, 110
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, L_.str
	push	hl
	call	_gfx_PrintString
	pop	hl
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_DrawMenu
_DrawMenu:
	ld	hl, -3
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, 8
	push	hl
	ld	hl, 300
	push	hl
	ld	hl, 230
	push	hl
	ld	hl, 10
	push	hl
	call	_gfx_FillRectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, -2
	push	hl
	call	_gfx_SetTextFGColor
	pop	hl
	ld	hl, 1
	push	hl
	push	hl
	call	_gfx_SetTextScale
	pop	hl
	pop	hl
	ld	hl, 230
	push	hl
	ld	hl, 10
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, L_.str.1
	push	hl
	call	_gfx_PrintString
	pop	hl
	ld	hl, _menu
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld.sis	de, 1
	or	a, a
	sbc.sis	hl, de
	jq	nz, BB1_2
	ld	hl, 8
	push	hl
	ld	hl, 300
	push	hl
	ld	hl, 230
	push	hl
	ld	hl, 10
	push	hl
	call	_gfx_FillRectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 230
	push	hl
	ld	hl, 18
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, L_.str.2
	push	hl
	call	_gfx_PrintString
	pop	hl
	ld	hl, 230
	push	hl
	ld	hl, 82
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, L_.str.3
	push	hl
	call	_gfx_PrintString
	pop	hl
	ld	hl, 230
	push	hl
	ld	hl, 146
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, L_.str.4
	push	hl
	call	_gfx_PrintString
	pop	hl
	ld	hl, 230
	push	hl
	ld	hl, 210
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, L_.str.5
	push	hl
	call	_gfx_PrintString
	pop	hl
	ld	hl, 230
	push	hl
	ld	hl, 274
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, L_.str.6
	push	hl
	call	_gfx_PrintString
	pop	hl
BB1_2:
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_DrawCursor
_DrawCursor:
	ld	hl, -9
	call	__frameset
	ld	hl, 40
	ld	(ix + -6), hl
	ld	hl, -6
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld.sis	hl, 0
	ld	e, l
	ld	d, h
	ld	iy, _h
	ld	(iy), e
	ld	(iy + 1), d
	ld	hl, _i
	ld	(hl), e
	inc	hl
	ld	(hl), d
	ld	iy, _l
	ld	(iy), e
	ld	(iy + 1), d
	ld	hl, _posx
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld.sis	bc, 1
	ld	l, e
	ld	h, d
	or	a, a
	sbc.sis	hl, bc
	jq	nz, BB2_2
	ld	bc, -61
	ld	(ix + -3), bc
	ld	hl, _h
	ld.sis	bc, 23
	ld	(hl), c
	inc	hl
	ld	(hl), b
	ld.sis	hl, 61
	ld	(iy), l
	ld	(iy + 1), h
	ld	hl, 14
	ld	(ix + -9), hl
	jq	BB2_7
BB2_2:
	ld	iy, _h
	ld.sis	bc, 2
	ld	l, e
	ld	h, d
	or	a, a
	sbc.sis	hl, bc
	jq	nz, BB2_6
	ld.sis	hl, 23
	ld	c, l
	ld	b, h
	ld	(iy), c
	ld	(iy + 1), b
	ld	hl, _l
	ld	(hl), c
	inc	hl
	ld	(hl), b
	ld	hl, _posy
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	iyl, e
	ld	iyh, d
	pop	de
	ld.sis	bc, 5
	ex	de, hl
	ld	e, iyl
	ld	d, iyh
	ex	de, hl
	or	a, a
	sbc.sis	hl, bc
	jq	z, BB2_5
	ld.sis	bc, 8
	ex	de, hl
	ld	e, iyl
	ld	d, iyh
	ex	de, hl
	or	a, a
	sbc.sis	hl, bc
	jq	nz, BB2_8
BB2_5:
	ld.sis	hl, 28
	ld	bc, 42
	ld	(ix + -9), bc
	ld	iy, _i
	ld	(iy), l
	ld	(iy + 1), h
	jq	BB2_9
BB2_6:
	ld	hl, 17
	ld	(ix + -6), hl
	ld	hl, 14
	ld	(ix + -9), hl
	or	a, a
	sbc	hl, hl
	ld	(ix + -3), hl
BB2_7:
	ld	bc, 18
	jq	BB2_10
BB2_8:
	ld	hl, 14
	ld	(ix + -9), hl
BB2_9:
	ld	bc, 18
	ld	hl, -23
	ld	(ix + -3), hl
BB2_10:
	ld	iy, 0
	ld	iyl, e
	ld	iyh, d
	lea	hl, iy + 0
	call	__imulu
	ld	de, 203
	add	hl, de
	ex	de, hl
	ld	hl, (ix + -3)
	add	hl, de
	ld	(ix + -3), hl
	ld	hl, _posy
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	iyl, e
	ld	iyh, d
	pop	de
	lea	hl, iy + 0
	ld	bc, 14
	call	__imulu
	inc	hl
	ld	de, (ix + -9)
	push	de
	ld	de, (ix + -6)
	push	de
	push	hl
	ld	hl, (ix + -3)
	push	hl
	call	_gfx_FillRectangle
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_PrintNumber
_PrintNumber:
	ld	hl, -3
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, 30
	push	hl
	ld	hl, 50
	push	hl
	ld	hl, 200
	push	hl
	ld	hl, 56
	push	hl
	call	_gfx_FillRectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 3
	push	hl
	push	hl
	call	_gfx_SetTextScale
	pop	hl
	pop	hl
	ld	hl, 200
	push	hl
	ld	hl, 56
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	a, (_c)
	ld	l, a
	push	hl
	call	_gfx_SetTextFGColor
	pop	hl
	ld	hl, _e
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	de, 0
	ld	e, l
	ld	d, h
	ld	hl, 2
	push	hl
	push	de
	call	_gfx_PrintInt
	pop	hl
	pop	hl
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_DrawChip
_DrawChip:
	ld	hl, -9
	call	__frameset
	ld	hl, (ix + 6)
	ld	(ix + -9), hl
	ld	hl, (ix + 9)
	ld	(ix + -3), hl
	ld	hl, (ix + 12)
	ld	(ix + -6), hl
	ld	hl, -2
	push	hl
	call	_gfx_SetTextFGColor
	ld	iy, (ix + -9)
	pop	hl
	ld	de, 1
	lea	hl, iy + 0
	or	a, a
	sbc	hl, de
	push	hl
	pop	de
	ld	bc, 10
	or	a, a
	sbc	hl, bc
	jq	c, BB4_3
	ld	de, 20
	lea	hl, iy + 0
	or	a, a
	sbc	hl, de
	jq	nz, BB4_5
	ld.sis	de, 251
	ld	c, -5
	jq	BB4_11
BB4_3:
	ld	hl, LJTI4_0
	add	hl, de
	add	hl, de
	add	hl, de
	ld	hl, (hl)
	jp	(hl)
BB4_4:
	ld.sis	de, 252
	ld	c, -4
	jq	BB4_11
BB4_5:
	ld	de, 50
	lea	hl, iy + 0
	or	a, a
	sbc	hl, de
	jq	nz, BB4_7
	ld.sis	de, 246
	ld	c, -10
	jq	BB4_11
BB4_7:
	ld	a, (_color)
	ld	c, a
	jq	BB4_12
BB4_8:
	ld.sis	de, 248
	ld	c, -8
	jq	BB4_11
BB4_9:
	ld.sis	de, 249
	ld	c, -7
	jq	BB4_11
BB4_10:
	ld.sis	de, 247
	ld	c, -9
BB4_11:
	ld	hl, _color
	ld	(hl), e
	inc	hl
	ld	(hl), d
BB4_12:
	push	bc
	call	_gfx_SetColor
	pop	hl
	ld	hl, 5
	push	hl
	ld	hl, (ix + -6)
	push	hl
	ld	hl, (ix + -3)
	push	hl
	call	_gfx_FillCircle
	pop	hl
	pop	hl
	pop	hl
	ld	hl, -11
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, (ix + -3)
	ld	(ix + 6), hl
	ld	hl, (ix + -6)
	ld	(ix + 9), hl
	ld	hl, 3
	ld	(ix + 12), hl
	ld	sp, ix
	pop	ix
	jp	_gfx_FillCircle
	section	.text,"ax",@progbits
	section	.rodata,"a",@progbits
lJTI4_0:
	private	LJTI4_0
LJTI4_0:
	dl	BB4_4
	dl	BB4_8
	dl	BB4_7
	dl	BB4_7
	dl	BB4_9
	dl	BB4_7
	dl	BB4_7
	dl	BB4_7
	dl	BB4_7
	dl	BB4_10

	section	.text,"ax",@progbits
	public	_DrawButtons
_DrawButtons:
	ld	hl, -2
	push	hl
	call	_gfx_SetColor
	ld.sis	bc, 0
	pop	hl
	ld.sis	de, 7
BB5_1:
	ld	hl, _k
	ld	(hl), c
	inc	hl
	ld	(hl), b
	ld	l, c
	ld	h, b
	or	a, a
	sbc.sis	hl, de
	jq	nc, BB5_3
	or	a, a
	sbc	hl, hl
	ld	l, c
	ld	h, b
	ld	bc, 14
	call	__imulu
	ld	de, 57
	add	hl, de
	ld	de, 15
	push	de
	ld	de, 41
	push	de
	push	hl
	ld	hl, 160
	push	hl
	call	_gfx_Rectangle
	ld.sis	de, 7
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, _k
	ld	c, (hl)
	inc	hl
	ld	b, (hl)
	inc.sis	bc
	jq	BB5_1
BB5_3:
	ld	hl, -2
	push	hl
	call	_gfx_SetTextFGColor
	pop	hl
	ld	hl, 1
	push	hl
	push	hl
	call	_gfx_SetTextScale
	pop	hl
	pop	hl
	ld	hl, 61
	push	hl
	ld	hl, 165
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, L_.str.7
	push	hl
	call	_gfx_PrintString
	pop	hl
	ld	hl, 75
	push	hl
	ld	hl, 167
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, L_.str.8
	push	hl
	call	_gfx_PrintString
	pop	hl
	ld	hl, 78
	push	hl
	ld	hl, 187
	push	hl
	ld	hl, 1
	push	hl
	call	_DrawChip
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 89
	push	hl
	ld	hl, 167
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, L_.str.9
	push	hl
	call	_gfx_PrintString
	pop	hl
	ld	hl, 92
	push	hl
	ld	hl, 187
	push	hl
	ld	hl, 2
	push	hl
	call	_DrawChip
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 103
	push	hl
	ld	hl, 167
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, L_.str.10
	push	hl
	call	_gfx_PrintString
	pop	hl
	ld	hl, 106
	push	hl
	ld	hl, 187
	push	hl
	ld	hl, 5
	push	hl
	call	_DrawChip
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 117
	push	hl
	ld	hl, 163
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, L_.str.11
	push	hl
	call	_gfx_PrintString
	pop	hl
	ld	hl, 120
	push	hl
	ld	hl, 187
	push	hl
	ld	hl, 10
	push	hl
	call	_DrawChip
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 131
	push	hl
	ld	hl, 163
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, L_.str.12
	push	hl
	call	_gfx_PrintString
	pop	hl
	ld	hl, 134
	push	hl
	ld	hl, 187
	push	hl
	ld	hl, 20
	push	hl
	call	_DrawChip
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 145
	push	hl
	ld	hl, 163
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, L_.str.13
	push	hl
	call	_gfx_PrintString
	pop	hl
	ld	hl, 148
	push	hl
	ld	hl, 187
	push	hl
	ld	hl, 50
	push	hl
	call	_DrawChip
	pop	hl
	pop	hl
	pop	hl
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_correctchip
_correctchip:
	ld	hl, _chipa
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	add.sis	hl, bc
	or	a, a
	sbc.sis	hl, bc
	jq	z, BB6_9
	ld.sis	hl, 1
	ld	iy, _chipb
	ld	(iy), l
	ld	(iy + 1), h
	ld.sis	bc, 1
	ld	l, e
	ld	h, d
	or	a, a
	sbc.sis	hl, bc
	jq	z, BB6_9
	ld.sis	hl, 2
	ld	(iy), l
	ld	(iy + 1), h
	ld.sis	bc, 5
	ld	l, e
	ld	h, d
	or	a, a
	sbc.sis	hl, bc
	jq	c, BB6_9
	ld.sis	hl, 5
	ld	(iy), l
	ld	(iy + 1), h
	ld.sis	bc, 10
	ld	l, e
	ld	h, d
	or	a, a
	sbc.sis	hl, bc
	jq	c, BB6_9
	ld.sis	hl, 10
	ld	(iy), l
	ld	(iy + 1), h
	ld.sis	bc, 20
	ld	l, e
	ld	h, d
	or	a, a
	sbc.sis	hl, bc
	jq	c, BB6_9
	ld.sis	bc, 50
	ld	l, e
	ld	h, d
	or	a, a
	sbc.sis	hl, bc
	jq	c, BB6_6
	ld.sis	hl, 50
	jq	BB6_8
BB6_9:
	ret
BB6_6:
	ld.sis	hl, 20
BB6_8:
	ld	(iy), l
	ld	(iy + 1), h
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_placechip
_placechip:
	ld	hl, -3
	call	__frameset
	ld	hl, (ix + 6)
	ld.sis	de, 0
	ld	iy, _chipb
	ld	(iy), e
	ld	(iy + 1), d
	add	hl, hl
	ex	de, hl
	ld	hl, _bets
	add	hl, de
	ld	(ix + -3), hl
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	iy, _chipa
	ld	(iy), l
	ld	(iy + 1), h
	call	_correctchip
	ld	hl, _chipa
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	add.sis	hl, bc
	or	a, a
	sbc.sis	hl, bc
	jq	z, BB7_3
	ld	iy, (ix + 9)
	ld	bc, (ix + 12)
	ld	hl, _chipb
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	de, 0
	ld	e, l
	ld	d, h
	push	bc
	push	iy
	push	de
	call	_DrawChip
	pop	hl
	pop	hl
	pop	hl
	ld	hl, _chipa
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	iy, _chipb
	ld	e, (iy)
	ld	d, (iy + 1)
	or	a, a
	sbc.sis	hl, de
	jq	z, BB7_3
	ld	hl, 1
	push	hl
	push	hl
	call	_gfx_SetTextScale
	pop	hl
	pop	hl
	or	a, a
	sbc	hl, hl
	push	hl
	call	_gfx_SetTextFGColor
	pop	hl
	ld	hl, (ix + 9)
	ld	de, -4
	add	hl, de
	ld	de, (ix + 12)
	push	de
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, (ix + -3)
	ld	de, 0
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	hl, 1
	push	hl
	push	de
	call	_gfx_PrintInt
	pop	hl
	pop	hl
BB7_3:
	pop	hl
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_createTableau
_createTableau:
	ld	hl, -2
	call	__frameset
	ld	hl, _tableau_data
	ld	de, 215
	ld	bc, 15
	push	bc
	push	de
	push	hl
	call	_gfx_RLETSprite_NoClip
	ld	hl, _m
	push	hl
	pop	iy
	pop	hl
	pop	hl
	pop	hl
	ld.sis	bc, 39
	ld.sis	de, 0
BB8_1:
	ld	(iy), e
	ld	(iy + 1), d
	ld	l, e
	ld	h, d
	or	a, a
	sbc.sis	hl, bc
	jq	nc, BB8_6
	ld.sis	hl, 0
	ld	iy, _chipb
	ld	(iy), l
	ld	(iy + 1), h
	or	a, a
	sbc	hl, hl
	ld	l, e
	ld	h, d
	add	hl, hl
	ex	de, hl
	ld	hl, _bets
	add	hl, de
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	de, _chipa
	push	de
	pop	iy
	ld	(iy), l
	ld	(iy + 1), h
	call	_correctchip
	ld	hl, _m
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	ld.sis	bc, 3
	call	__sdivu
	ld	(ix + -2), l
	ld	(ix + -1), h
	call	__smulu
	ld	c, l
	ld	b, h
	ld	l, e
	ld	h, d
	or	a, a
	sbc.sis	hl, bc
	ld.sis	bc, 18
	call	__smulu
	ex	de, hl
	ld	iyl, e
	ld	iyh, d
	ex	de, hl
	ld	hl, _p
	push	de
	ld	e, iyl
	ld	d, iyh
	ld	(hl), e
	inc	hl
	ld	(hl), d
	pop	de
	ld	l, (ix + -2)
	ld	h, (ix + -1)
	ld.sis	bc, 14
	call	__smulu
	ld	e, l
	ld	d, h
	ld	hl, _o
	ld	(hl), e
	inc	hl
	ld	(hl), d
	ld	hl, _chipa
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	add.sis	hl, bc
	or	a, a
	sbc.sis	hl, bc
	jq	z, BB8_5
	ld	hl, _chipb
	ld	c, (hl)
	inc	hl
	ld	b, (hl)
	or	a, a
	sbc	hl, hl
	ld	l, c
	ld	h, b
	ld.sis	bc, 268
	add.sis	iy, bc
	ld	bc, 0
	ld	c, iyl
	ld	b, iyh
	ld	iy, 0
	ld	iyl, e
	ld	iyh, d
	ld	de, 36
	add	iy, de
	push	iy
	push	bc
	push	hl
	call	_DrawChip
	pop	hl
	pop	hl
	pop	hl
	ld	hl, _chipa
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	iy, _chipb
	ld	e, (iy)
	ld	d, (iy + 1)
	or	a, a
	sbc.sis	hl, de
	jq	z, BB8_5
	ld	hl, 1
	push	hl
	push	hl
	call	_gfx_SetTextScale
	pop	hl
	pop	hl
	or	a, a
	sbc	hl, hl
	push	hl
	call	_gfx_SetTextFGColor
	pop	hl
	ld	hl, _p
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	bc, 0
	push	bc
	pop	iy
	ld	iyl, e
	ld	iyh, d
	ld	de, 264
	add	iy, de
	ld	hl, _o
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	push	bc
	pop	hl
	ld	l, e
	ld	h, d
	ld	de, 36
	add	hl, de
	push	hl
	push	iy
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, _m
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	bc, 0
	push	bc
	pop	hl
	ld	l, e
	ld	h, d
	add	hl, hl
	ex	de, hl
	ld	hl, _bets
	add	hl, de
	ld	c, (hl)
	inc	hl
	ld	b, (hl)
	ld	hl, 1
	push	hl
	push	bc
	call	_gfx_PrintInt
	pop	hl
	pop	hl
BB8_5:
	ld	hl, _m
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	dec	hl
	inc.sis	de
	push	hl
	pop	iy
	ld.sis	bc, 39
	jq	BB8_1
BB8_6:
	ld	hl, 22
	push	hl
	ld	hl, 286
	push	hl
	ld	hl, 39
	push	hl
	call	_placechip
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 36
	push	hl
	ld	hl, 250
	push	hl
	ld	hl, 40
	push	hl
	call	_placechip
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 50
	push	hl
	ld	hl, 250
	push	hl
	ld	hl, 41
	push	hl
	call	_placechip
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 64
	push	hl
	ld	hl, 250
	push	hl
	ld	hl, 42
	push	hl
	call	_placechip
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 78
	push	hl
	ld	hl, 250
	push	hl
	ld	hl, 43
	push	hl
	call	_placechip
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 120
	push	hl
	ld	hl, 250
	push	hl
	ld	hl, 44
	push	hl
	call	_placechip
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 162
	push	hl
	ld	hl, 250
	push	hl
	ld	hl, 45
	push	hl
	call	_placechip
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 176
	push	hl
	ld	hl, 250
	push	hl
	ld	hl, 46
	push	hl
	call	_placechip
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 190
	push	hl
	ld	hl, 250
	push	hl
	ld	hl, 47
	push	hl
	call	_placechip
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 204
	push	hl
	ld	hl, 250
	push	hl
	ld	hl, 48
	push	hl
	call	_placechip
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 218
	push	hl
	ld	hl, 250
	push	hl
	ld	hl, 49
	push	hl
	call	_placechip
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_bet
_bet:
	ld	hl, -5
	call	__frameset
	ld	de, (ix + 9)
	ld	hl, _posx
	ld	c, (hl)
	inc	hl
	ld	b, (hl)
	ld	iy, 0
	lea	hl, iy + 0
	ld	l, c
	ld	h, b
	or	a, a
	sbc	hl, de
	jq	nz, BB9_5
	ld	de, (ix + 12)
	ld	hl, _posy
	ld	c, (hl)
	inc	hl
	ld	b, (hl)
	lea	hl, iy + 0
	ld	l, c
	ld	h, b
	or	a, a
	sbc	hl, de
	jq	nz, BB9_5
	ld	hl, (ix + 6)
	ld	bc, _bets
	add	hl, hl
	ex	de, hl
	push	bc
	pop	hl
	add	hl, de
	ld	(ix + -3), hl
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	lea	de, iy + 0
	ld	e, l
	ld	d, h
	ld	hl, _chip
	ld	c, (hl)
	inc	hl
	ld	b, (hl)
	ld	iyl, c
	ld	iyh, b
	add	iy, de
	ld	hl, _credits
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	or	a, a
	sbc.sis	hl, bc
	jq	c, BB9_5
	lea	hl, iy + 0
	ld	(ix + -5), e
	ld	(ix + -4), d
	ld	de, 51
	or	a, a
	sbc	hl, de
	ld	e, (ix + -5)
	ld	d, (ix + -4)
	jq	nc, BB9_5
	ld	hl, (ix + -3)
	push	de
	ld	e, iyl
	ld	d, iyh
	ld	(hl), e
	inc	hl
	ld	(hl), d
	pop	de
	ld	l, e
	ld	h, d
	or	a, a
	sbc.sis	hl, bc
	ld	iy, _credits
	ld	(iy), l
	ld	(iy + 1), h
BB9_5:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_PrintCredits
_PrintCredits:
	ld	hl, -3
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, 10
	push	hl
	ld	de, 100
	push	de
	ld	de, 15
	push	de
	push	hl
	call	_gfx_FillRectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	or	a, a
	sbc	hl, hl
	push	hl
	call	_gfx_SetTextFGColor
	pop	hl
	ld	hl, 15
	push	hl
	ld	hl, 10
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, L_.str.14
	push	hl
	call	_gfx_PrintString
	pop	hl
	ld	hl, _credits
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	de, 0
	ld	e, l
	ld	d, h
	ld	hl, 1
	push	hl
	push	de
	call	_gfx_PrintInt
	pop	hl
	pop	hl
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_main
_main:
	ld	hl, -24
	call	__frameset
	ld.sis	bc, 1
	ld	hl, _posy
	ld.sis	de, 4
	ld	iy, _posx
	ld	(iy), e
	ld	(iy + 1), d
	ld	(hl), c
	inc	hl
	ld	(hl), b
	ld.sis	de, 0
	ld	hl, _credits
	ld	(hl), e
	inc	hl
	ld	(hl), d
	ld	hl, _chip
	ld	(hl), c
	inc	hl
	ld	(hl), b
	call	_ti_CloseAll
	ld	hl, L_.str.16
	push	hl
	ld	hl, L_.str.15
	push	hl
	call	_ti_Open
	ld	e, a
	ld	(ix + -3), de
	pop	hl
	pop	hl
	push	de
	ld	hl, 1
	push	hl
	inc	hl
	push	hl
	ld	hl, _credits
	push	hl
	call	_ti_Read
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix + -3)
	push	hl
	call	_ti_Close
	pop	hl
	call	_gfx_Begin
	or	a, a
	sbc	hl, hl
	push	hl
	ld	hl, 510
	push	hl
	ld	hl, _palette_gfx
	push	hl
	call	_gfx_SetPalette
	pop	hl
	pop	hl
	pop	hl
	ld	hl, _s
	ld.sis	de, 0
	ld	(hl), e
	inc	hl
	ld	(hl), d
	ld	hl, 1
	push	hl
	call	_gfx_SetDraw
	pop	hl
	ld	bc, (_rotate_sprite)
	ld	a, (_a)
	ld	l, a
	ld	a, (_s)
	ld	e, a
	ld	a, l
	add	a, e
	ld	l, a
	ld	de, 64
	push	de
	push	hl
	push	bc
	ld	hl, _ro_data
	push	hl
	call	_gfx_RotateScaleSprite
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, -3
	push	hl
	call	_gfx_FillScreen
	pop	hl
	call	_DrawTitle
	call	_DrawMenu
	ld	hl, (_rotate_sprite)
	ld	de, 69
	push	de
	ld	de, 17
	push	de
	push	hl
	call	_gfx_TransparentSprite_NoClip
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 36
	push	hl
	ld	hl, 59
	push	hl
	ld	hl, _pfeil_data
	push	hl
	call	_gfx_RLETSprite_NoClip
	pop	hl
	pop	hl
	pop	hl
	call	_createTableau
	call	_DrawButtons
	call	_gfx_SwapDraw
	ld	hl, -3
	push	hl
	call	_gfx_FillScreen
	pop	hl
BB11_1:
	ld	hl, _e
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	iyl, e
	ld	iyh, d
	pop	de
	or	a, a
	sbc	hl, hl
	ex	de, hl
	ld	e, iyl
	ld	d, iyh
	ex	de, hl
	ld	(ix + -9), hl
	add.sis	hl, bc
	or	a, a
	sbc.sis	hl, bc
	ld	a, 1
	jq	z, BB11_3
	ld	a, 0
BB11_3:
	ex	de, hl
	ld	e, iyl
	ld	d, iyh
	ex	de, hl
	ld.sis	de, -13
	add.sis	hl, de
	ld	(ix + -24), l
	ld	(ix + -23), h
	ex	de, hl
	ld	e, iyl
	ld	d, iyh
	ex	de, hl
	dec.sis	hl
	ld	(ix + -18), l
	ld	(ix + -17), h
	ex	de, hl
	ld	e, iyl
	ld	d, iyh
	ex	de, hl
	ld.sis	bc, 3
	call	__sremu
	ld	(ix + -20), l
	ld	(ix + -19), h
	ld	hl, _c
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	(ix + -16), l
	ld	(ix + -15), h
	ex	de, hl
	ld	e, iyl
	ld	d, iyh
	ex	de, hl
	ld.sis	bc, 1
	call	__sand
	ld	(ix + -22), l
	ld	(ix + -21), h
	ld	hl, (ix + -9)
	dec	hl
	ld	(ix + -9), hl
	ld	hl, _bets
	ld	(ix + -12), hl
	ld.sis	hl, 0
	ld	(ix + -3), l
	ld	(ix + -2), h
	ld	de, 0
	push	iy
	ex	(sp), hl
	ld	(ix + -14), l
	ld	(ix + -13), h
	pop	hl
BB11_4:
	push	de
	pop	hl
	ld	bc, 50
	or	a, a
	sbc	hl, bc
	jq	z, BB11_52
	push	de
	pop	hl
	ld	bc, 36
	or	a, a
	sbc	hl, bc
	ld	(ix + -6), de
	jq	nc, BB11_8
	ld	hl, (ix + -9)
	or	a, a
	sbc	hl, de
	jq	nz, BB11_8
	ld	hl, _credits
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	dec	hl
	push	hl
	pop	iy
	ld	hl, (ix + -12)
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld.sis	bc, 36
	call	__smulu
	add.sis	hl, de
	ld	(iy), l
	ld	(iy + 1), h
	jq	BB11_13
BB11_8:
	ex	de, hl
	ld	de, 39
	or	a, a
	sbc	hl, de
	jq	nz, BB11_13
	ld	l, (ix + -14)
	ld	h, (ix + -13)
	add.sis	hl, bc
	or	a, a
	sbc.sis	hl, bc
	jq	nz, BB11_13
	ld	iy, _credits
	ld	e, (iy)
	ld	d, (iy + 1)
	ld	hl, _bets+78
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld.sis	bc, 36
	jq	BB11_11
BB11_13:
	ld	l, (ix + -3)
	ld	h, (ix + -2)
	ld.sis	bc, 36
	or	a, a
	sbc.sis	hl, bc
	ld	bc, 0
	ld	c, l
	ld	b, h
	push	bc
	pop	hl
	ld	de, 6
	or	a, a
	sbc	hl, de
	jq	c, BB11_17
BB11_14:
	ld	hl, (ix + -6)
	ld	de, 42
	or	a, a
	sbc	hl, de
	jq	nz, BB11_30
	ld	l, (ix + -14)
	ld	h, (ix + -13)
	ld.sis	de, 25
	or	a, a
	sbc.sis	hl, de
	jq	c, BB11_30
	ld	hl, _credits
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	dec	hl
	push	hl
	pop	iy
	ld	hl, _bets+84
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld.sis	bc, 3
BB11_11:
	call	__smulu
	add.sis	hl, de
	jq	BB11_12
BB11_17:
	ld	hl, LJTI11_0
	add	hl, bc
	add	hl, bc
	add	hl, bc
	ld	hl, (hl)
	jp	(hl)
BB11_18:
	ld	l, (ix + -20)
	ld	h, (ix + -19)
	ld.sis	bc, 1
	or	a, a
	sbc.sis	hl, bc
	jq	nz, BB11_30
	ld	hl, _credits
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	dec	hl
	push	hl
	pop	iy
	ld	hl, _bets+72
	jq	BB11_29
BB11_20:
	ld	l, (ix + -20)
	ld	h, (ix + -19)
	ld.sis	bc, 2
	or	a, a
	sbc.sis	hl, bc
	jq	nz, BB11_30
	ld	hl, _credits
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	dec	hl
	push	hl
	pop	iy
	ld	hl, _bets+74
	jq	BB11_29
BB11_22:
	bit	0, a
	jq	nz, BB11_30
	ld	l, (ix + -20)
	ld	h, (ix + -19)
	add.sis	hl, bc
	or	a, a
	sbc.sis	hl, bc
	jq	nz, BB11_30
	ld	hl, _credits
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	dec	hl
	push	hl
	pop	iy
	ld	hl, _bets+76
	jq	BB11_29
BB11_25:
	ld	l, (ix + -18)
	ld	h, (ix + -17)
	ld.sis	de, 12
	or	a, a
	sbc.sis	hl, de
	jq	nc, BB11_30
	ld	hl, _credits
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	dec	hl
	push	hl
	pop	iy
	ld	hl, _bets+80
	jq	BB11_29
BB11_27:
	ld	l, (ix + -24)
	ld	h, (ix + -23)
	ld.sis	de, 12
	or	a, a
	sbc.sis	hl, de
	jq	nc, BB11_30
	ld	hl, _credits
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	dec	hl
	push	hl
	pop	iy
	ld	hl, _bets+82
BB11_29:
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld.sis	bc, 3
	call	__smulu
	add.sis	hl, de
	ld	(iy), l
	ld	(iy + 1), h
BB11_30:
	ld	hl, (ix + -6)
	ld	de, 43
	or	a, a
	sbc	hl, de
	jq	nz, BB11_34
	ld	l, (ix + -16)
	ld	h, (ix + -15)
	ld.sis	de, 252
	or	a, a
	sbc.sis	hl, de
	jq	nz, BB11_34
	ld	hl, _credits
	push	hl
	pop	iy
	ld	c, (iy)
	ld	b, (iy + 1)
	ld	hl, _bets+86
	jq	BB11_33
BB11_34:
	ld	hl, (ix + -6)
	ld	de, 44
	or	a, a
	sbc	hl, de
	jq	nz, BB11_37
	ld	l, (ix + -16)
	ld	h, (ix + -15)
	ld.sis	de, 254
	or	a, a
	sbc.sis	hl, de
	jq	nz, BB11_37
	ld	hl, _credits
	push	hl
	pop	iy
	ld	c, (iy)
	ld	b, (iy + 1)
	ld	hl, _bets+88
	jq	BB11_33
BB11_37:
	ld	bc, (ix + -6)
	push	bc
	pop	hl
	ld	de, 45
	or	a, a
	sbc	hl, de
	jq	nz, BB11_40
	ld	l, (ix + -18)
	ld	h, (ix + -17)
	ld.sis	de, 18
	or	a, a
	sbc.sis	hl, de
	push	bc
	pop	de
	jq	nc, BB11_51
	ld	hl, _credits
	push	hl
	pop	iy
	ld	c, (iy)
	ld	b, (iy + 1)
	ld	hl, _bets+90
	jq	BB11_50
BB11_40:
	push	bc
	pop	hl
	ld	de, 46
	or	a, a
	sbc	hl, de
	jq	nz, BB11_43
	ld	l, (ix + -14)
	ld	h, (ix + -13)
	ld.sis	de, 19
	or	a, a
	sbc.sis	hl, de
	jq	c, BB11_43
	ld	hl, _credits
	push	hl
	pop	iy
	ld	c, (iy)
	ld	b, (iy + 1)
	ld	hl, _bets+92
BB11_33:
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	add.sis	hl, hl
	add.sis	hl, bc
BB11_12:
	ld	(iy), l
	ld	(iy + 1), h
	ld	de, (ix + -6)
BB11_51:
	inc	de
	ld.sis	hl, 0
	ld	iy, (ix + -12)
	ld	(iy), l
	ld	(iy + 1), h
	ld	l, (ix + -3)
	ld	h, (ix + -2)
	inc.sis	hl
	ld	(ix + -3), l
	ld	(ix + -2), h
	lea	iy, iy + 2
	ld	(ix + -12), iy
	jq	BB11_4
BB11_43:
	ld	c, (ix + -3)
	ld	b, (ix + -2)
	ld	l, c
	ld	h, b
	ld.sis	de, 47
	or	a, a
	sbc.sis	hl, de
	jq	nz, BB11_46
	ld	e, a
	ld	l, (ix + -22)
	ld	h, (ix + -21)
	ld	a, l
	ld	l, 1
	xor	a, l
	bit	0, a
	ld	a, e
	ld	de, (ix + -6)
	jq	nz, BB11_51
	ld	hl, _credits
	push	hl
	pop	iy
	ld	c, (iy)
	ld	b, (iy + 1)
	ld	hl, _bets+94
	jq	BB11_50
BB11_46:
	ld	l, c
	ld	h, b
	ld.sis	de, 48
	or	a, a
	sbc.sis	hl, de
	ld	de, (ix + -6)
	jq	nz, BB11_51
	bit	0, a
	jq	nz, BB11_51
	ld	l, (ix + -22)
	ld	h, (ix + -21)
	bit	0, l
	jq	nz, BB11_51
	ld	hl, _credits
	push	hl
	pop	iy
	ld	c, (iy)
	ld	b, (iy + 1)
	ld	hl, _bets+96
BB11_50:
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	add.sis	hl, hl
	add.sis	hl, bc
	ld	(iy), l
	ld	(iy + 1), h
	jq	BB11_51
BB11_52:
	ld.sis	hl, 50
	ld	iy, _x
	ld	(iy), l
	ld	(iy + 1), h
BB11_53:
	ld	hl, -720868
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	cp	a, 64
	jq	z, BB11_154
	call	_kb_Scan
	ld	hl, -3
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, 220
	push	hl
	ld	hl, 155
	push	hl
	ld	hl, 10
	push	hl
	ld	hl, 160
	push	hl
	call	_gfx_FillRectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	call	_DrawTitle
	call	_DrawMenu
	ld	hl, 167
	push	hl
	ld	hl, 163
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, _chip
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	de, 0
	ld	e, l
	ld	d, h
	ld	hl, 2
	push	hl
	push	de
	call	_gfx_PrintInt
	pop	hl
	pop	hl
	ld	hl, _chip
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	de, 0
	ld	e, l
	ld	d, h
	ld	hl, 170
	push	hl
	ld	hl, 187
	push	hl
	push	de
	call	_DrawChip
	pop	hl
	pop	hl
	pop	hl
	call	_PrintCredits
	call	_PrintNumber
	call	_DrawCursor
	call	_createTableau
	call	_DrawButtons
	ld	hl, (_rotate_sprite)
	ld	de, 69
	push	de
	ld	de, 17
	push	de
	push	hl
	call	_gfx_TransparentSprite_NoClip
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 36
	push	hl
	ld	hl, 59
	push	hl
	ld	hl, _pfeil_data
	push	hl
	call	_gfx_RLETSprite_NoClip
	pop	hl
	pop	hl
	pop	hl
	ld	hl, -720866
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	cp	a, 8
	jq	nz, BB11_59
	ld	hl, _posy
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	ld.sis	bc, 2
	or	a, a
	sbc.sis	hl, bc
	jq	c, BB11_59
	ld	l, e
	ld	h, d
	ld.sis	bc, 4
	or	a, a
	sbc.sis	hl, bc
	jq	nz, BB11_58
	ld	hl, _posx
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld.sis	bc, 1
	or	a, a
	sbc.sis	hl, bc
	jq	z, BB11_59
BB11_58:
	dec.sis	de
	ld	hl, _posy
	ld	(hl), e
	inc	hl
	ld	(hl), d
BB11_59:
	ld	hl, -720866
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	cp	a, 1
	jq	nz, BB11_74
	ld	hl, _posx
	ld	c, (hl)
	inc	hl
	ld	b, (hl)
	ld	hl, _posy
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	iyl, e
	ld	iyh, d
	pop	de
	ld	l, c
	ld	h, b
	ld.sis	de, 2
	or	a, a
	sbc.sis	hl, de
	jq	nz, BB11_64
	ex	de, hl
	ld	e, iyl
	ld	d, iyh
	ex	de, hl
	ld.sis	de, 4
	or	a, a
	sbc.sis	hl, de
	jq	nz, BB11_64
	ld	hl, _posy
	ld.sis	de, 5
	jq	BB11_63
BB11_64:
	ld	l, c
	ld	h, b
	ld.sis	de, 2
	or	a, a
	sbc.sis	hl, de
	jq	nz, BB11_67
	ex	de, hl
	ld	e, iyl
	ld	d, iyh
	ex	de, hl
	ld.sis	de, 5
	or	a, a
	sbc.sis	hl, de
	jq	nz, BB11_67
	ld	hl, _posy
	ld.sis	de, 8
	jq	BB11_63
BB11_67:
	ld	l, c
	ld	h, b
	ld.sis	de, 2
	or	a, a
	sbc.sis	hl, de
	jq	nz, BB11_70
	ex	de, hl
	ld	e, iyl
	ld	d, iyh
	ex	de, hl
	ld.sis	de, 8
	or	a, a
	sbc.sis	hl, de
	jq	nz, BB11_70
	ld	hl, _posy
	ld.sis	de, 11
BB11_63:
	ld	(hl), e
	inc	hl
	ld	(hl), d
	jq	BB11_74
BB11_70:
	ex	de, hl
	ld	e, iyl
	ld	d, iyh
	ex	de, hl
	ld.sis	de, 14
	or	a, a
	sbc.sis	hl, de
	jq	nc, BB11_74
	ld	l, c
	ld	h, b
	ld.sis	de, 1
	or	a, a
	sbc.sis	hl, de
	jq	nz, BB11_73
	ex	de, hl
	ld	e, iyl
	ld	d, iyh
	ex	de, hl
	ld.sis	de, 10
	or	a, a
	sbc.sis	hl, de
	jq	z, BB11_74
BB11_73:
	inc.sis	iy
	ld	hl, _posy
	push	de
	ld	e, iyl
	ld	d, iyh
	ld	(hl), e
	inc	hl
	ld	(hl), d
	pop	de
BB11_74:
	ld	hl, -720866
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	cp	a, 2
	jq	nz, BB11_81
	ld	hl, _posx
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	iyl, e
	ld	iyh, d
	pop	de
	ld	hl, _posy
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	ld.sis	bc, -2
	call	__sand
	ld	(ix + -3), l
	ld	(ix + -2), h
	ex	de, hl
	ld	e, iyl
	ld	d, iyh
	ex	de, hl
	ld.sis	bc, 2
	or	a, a
	sbc.sis	hl, bc
	jq	nz, BB11_79
	ld	l, e
	ld	h, d
	ld.sis	de, 8
	or	a, a
	sbc.sis	hl, de
	jq	z, BB11_78
	ld	l, (ix + -3)
	ld	h, (ix + -2)
	ld.sis	de, 4
	or	a, a
	sbc.sis	hl, de
	jq	nz, BB11_79
BB11_78:
	ld	hl, _posx
	ld.sis	de, 1
	ld	(hl), e
	inc	hl
	ld	(hl), d
	jq	BB11_81
BB11_79:
	ex	de, hl
	ld	e, iyl
	ld	d, iyh
	ex	de, hl
	ld.sis	de, 3
	or	a, a
	sbc.sis	hl, de
	jq	c, BB11_81
	dec.sis	iy
	ld	hl, _posx
	push	de
	ld	e, iyl
	ld	d, iyh
	ld	(hl), e
	inc	hl
	ld	(hl), d
	pop	de
BB11_81:
	ld	hl, -720866
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	cp	a, 4
	jq	nz, BB11_84
	ld	hl, _posx
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	ld.sis	bc, 5
	or	a, a
	sbc.sis	hl, bc
	jq	nc, BB11_84
	inc.sis	de
	ld	hl, _posx
	ld	(hl), e
	inc	hl
	ld	(hl), d
BB11_84:
	ld	iy, -720878
	ld	l, (iy)
	ld	h, (iy + 1)
	ld	a, l
	cp	a, 32
	jq	nz, BB11_118
	ld	hl, _posx
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	hl, _posy
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	iyl, e
	ld	iyh, d
	pop	de
	ld	l, e
	ld	h, d
	ld.sis	bc, 1
	or	a, a
	sbc.sis	hl, bc
	jq	nz, BB11_87
	ex	de, hl
	ld	e, iyl
	ld	d, iyh
	ex	de, hl
	ld.sis	bc, 4
	or	a, a
	sbc.sis	hl, bc
	jq	z, BB11_154
BB11_87:
	ld	l, e
	ld	h, d
	ld.sis	bc, 1
	or	a, a
	sbc.sis	hl, bc
	jq	nz, BB11_90
	ex	de, hl
	ld	e, iyl
	ld	d, iyh
	ex	de, hl
	ld.sis	bc, 5
	or	a, a
	sbc.sis	hl, bc
	jq	nz, BB11_90
	ld.sis	hl, 1
	ld	iy, _chip
BB11_116:
	ld	(iy), l
	ld	(iy + 1), h
	jq	BB11_117
BB11_90:
	ld	l, e
	ld	h, d
	ld.sis	bc, 1
	or	a, a
	sbc.sis	hl, bc
	jq	nz, BB11_94
	ex	de, hl
	ld	e, iyl
	ld	d, iyh
	ex	de, hl
	ld.sis	bc, 6
	or	a, a
	sbc.sis	hl, bc
	jq	nz, BB11_94
	ld	hl, _chip
	ld.sis	de, 2
	jq	BB11_93
BB11_94:
	ld	l, e
	ld	h, d
	ld.sis	bc, 1
	or	a, a
	sbc.sis	hl, bc
	jq	nz, BB11_97
	ex	de, hl
	ld	e, iyl
	ld	d, iyh
	ex	de, hl
	ld.sis	bc, 7
	or	a, a
	sbc.sis	hl, bc
	jq	nz, BB11_97
	ld	hl, _chip
	ld.sis	de, 5
	jq	BB11_93
BB11_97:
	ld	l, e
	ld	h, d
	ld.sis	bc, 1
	or	a, a
	sbc.sis	hl, bc
	jq	nz, BB11_100
	ex	de, hl
	ld	e, iyl
	ld	d, iyh
	ex	de, hl
	ld.sis	bc, 8
	or	a, a
	sbc.sis	hl, bc
	jq	nz, BB11_100
	ld	hl, _chip
	ld.sis	de, 10
	jq	BB11_93
BB11_100:
	ld	l, e
	ld	h, d
	ld.sis	bc, 1
	or	a, a
	sbc.sis	hl, bc
	jq	nz, BB11_103
	ex	de, hl
	ld	e, iyl
	ld	d, iyh
	ex	de, hl
	ld.sis	bc, 9
	or	a, a
	sbc.sis	hl, bc
	jq	nz, BB11_103
	ld	hl, _chip
	ld.sis	de, 20
	jq	BB11_93
BB11_103:
	ld	l, e
	ld	h, d
	ld.sis	bc, 1
	or	a, a
	sbc.sis	hl, bc
	jq	nz, BB11_106
	ex	de, hl
	ld	e, iyl
	ld	d, iyh
	ex	de, hl
	ld.sis	bc, 10
	or	a, a
	sbc.sis	hl, bc
	jq	nz, BB11_106
	ld	hl, _chip
	ld.sis	de, 50
BB11_93:
	ld	(hl), e
	inc	hl
	ld	(hl), d
BB11_117:
	ld	hl, 1
	push	hl
	ld	hl, 4
	push	hl
	ld	hl, 39
	push	hl
	call	_bet
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 2
	push	hl
	push	hl
	ld	hl, 40
	push	hl
	call	_bet
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 3
	push	hl
	dec	hl
	push	hl
	ld	hl, 41
	push	hl
	call	_bet
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 4
	push	hl
	ld	hl, 2
	push	hl
	ld	hl, 42
	push	hl
	call	_bet
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 5
	push	hl
	ld	hl, 2
	push	hl
	ld	hl, 43
	push	hl
	call	_bet
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 8
	push	hl
	ld	hl, 2
	push	hl
	ld	hl, 44
	push	hl
	call	_bet
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 11
	push	hl
	ld	hl, 2
	push	hl
	ld	hl, 45
	push	hl
	call	_bet
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 12
	push	hl
	ld	hl, 2
	push	hl
	ld	hl, 46
	push	hl
	call	_bet
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 13
	push	hl
	ld	hl, 2
	push	hl
	ld	hl, 47
	push	hl
	call	_bet
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 14
	push	hl
	ld	hl, 2
	push	hl
	ld	hl, 48
	push	hl
	call	_bet
	pop	hl
	pop	hl
	pop	hl
	ld	iy, -720878
BB11_118:
	ld	c, (iy)
	ld	b, (iy + 1)
	ld	hl, _menu
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	a, c
	cp	a, 8
	jq	nz, BB11_122
	ld	l, e
	ld	h, d
	ld.sis	bc, 1
	or	a, a
	sbc.sis	hl, bc
	jq	nz, BB11_122
	ld	hl, _credits
	push	hl
	pop	iy
	ld	l, (iy)
	ld	h, (iy + 1)
	ld.sis	de, 20
	add.sis	hl, de
	ld	(iy), l
	ld	(iy + 1), h
	ld	iy, -720878
	ld.sis	de, 0
	ld	hl, _menu
	ld	(hl), e
	inc	hl
	ld	(hl), d
BB11_122:
	ld	l, (iy)
	ld	h, (iy + 1)
	ld	a, l
	cp	a, 4
	jq	nz, BB11_126
	ld	l, e
	ld	h, d
	ld.sis	bc, 1
	or	a, a
	sbc.sis	hl, bc
	jq	nz, BB11_126
	ld	hl, _credits
	push	hl
	pop	iy
	ld	l, (iy)
	ld	h, (iy + 1)
	ld.sis	de, 50
	add.sis	hl, de
	ld	(iy), l
	ld	(iy + 1), h
	ld	iy, -720878
	ld.sis	de, 0
	ld	hl, _menu
	ld	(hl), e
	inc	hl
	ld	(hl), d
BB11_126:
	ld	l, (iy)
	ld	h, (iy + 1)
	ld	a, l
	cp	a, 2
	jq	nz, BB11_130
	ld	l, e
	ld	h, d
	ld.sis	bc, 1
	or	a, a
	sbc.sis	hl, bc
	jq	nz, BB11_130
	ld	hl, _credits
	push	hl
	pop	iy
	ld	l, (iy)
	ld	h, (iy + 1)
	ld.sis	de, 100
	add.sis	hl, de
	ld	(iy), l
	ld	(iy + 1), h
	ld	iy, -720878
	ld.sis	de, 0
	ld	hl, _menu
	ld	(hl), e
	inc	hl
	ld	(hl), d
BB11_130:
	ld	l, (iy)
	ld	h, (iy + 1)
	ld	a, l
	cp	a, 1
	jq	nz, BB11_134
	ld	l, e
	ld	h, d
	ld.sis	bc, 1
	or	a, a
	sbc.sis	hl, bc
	jq	nz, BB11_134
	ld	hl, _credits
	push	hl
	pop	iy
	ld	l, (iy)
	ld	h, (iy + 1)
	ld.sis	de, 200
	add.sis	hl, de
	ld	(iy), l
	ld	(iy + 1), h
	ld	iy, -720878
	ld.sis	de, 0
	ld	hl, _menu
	ld	(hl), e
	inc	hl
	ld	(hl), d
BB11_134:
	ld	l, (iy)
	ld	h, (iy + 1)
	ld	a, l
	cp	a, 16
	jq	nz, BB11_137
	ld	l, e
	ld	h, d
	ld.sis	bc, 1
	or	a, a
	sbc.sis	hl, bc
	jq	nz, BB11_137
	ld	hl, _credits
	push	hl
	pop	iy
	ld	l, (iy)
	ld	h, (iy + 1)
	ld.sis	de, 10
	add.sis	hl, de
	ld	(iy), l
	ld	(iy + 1), h
	ld.sis	hl, 0
	ld	e, l
	ld	d, h
	jq	BB11_139
BB11_137:
	ld	c, (iy)
	ld	b, (iy + 1)
	ld	l, e
	ld	h, d
	add.sis	hl, bc
	or	a, a
	sbc.sis	hl, bc
	jq	nz, BB11_140
	ld	a, c
	cp	a, 16
	ld.sis	hl, 1
	ld	e, l
	ld	d, h
	jq	nz, BB11_140
BB11_139:
	ld	hl, _menu
	ld	(hl), e
	inc	hl
	ld	(hl), d
BB11_140:
	ld	hl, _posx
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	hl, _posy
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	iyl, e
	ld	iyh, d
	pop	de
	ex	de, hl
	ld	e, iyl
	ld	d, iyh
	ex	de, hl
	ld.sis	bc, 1
	or	a, a
	sbc.sis	hl, bc
	jq	nz, BB11_145
	ld	l, e
	ld	h, d
	ld.sis	bc, 5
	or	a, a
	sbc.sis	hl, bc
	jq	z, BB11_143
	ld	l, e
	ld	h, d
	dec.sis	hl
	ld.sis	bc, 3
	or	a, a
	sbc.sis	hl, bc
	jq	nc, BB11_145
BB11_143:
	ld.sis	de, 4
	ld	hl, _posx
	ld	(hl), e
	inc	hl
	ld	(hl), d
BB11_145:
	ex	de, hl
	ld	e, iyl
	ld	d, iyh
	ex	de, hl
	ld.sis	bc, -2
	call	__sand
	ld.sis	bc, 6
	or	a, a
	sbc.sis	hl, bc
	jq	nz, BB11_147
	ld	l, e
	ld	h, d
	ld.sis	bc, 2
	or	a, a
	sbc.sis	hl, bc
	ld.sis	bc, 5
	jq	z, BB11_149
BB11_147:
	ld.sis	bc, -9
	add.sis	iy, bc
	ld	l, e
	ld	h, d
	ld.sis	de, 2
	or	a, a
	sbc.sis	hl, de
	jq	nz, BB11_150
	ex	de, hl
	ld	e, iyl
	ld	d, iyh
	ex	de, hl
	ld.sis	de, 2
	or	a, a
	sbc.sis	hl, de
	ld.sis	bc, 8
	jq	nc, BB11_150
BB11_149:
	ld	hl, _posy
	ld	(hl), c
	inc	hl
	ld	(hl), b
BB11_150:
	call	_gfx_SwapDraw
	ld.sis	hl, 0
BB11_151:
	ld	iy, _x
	ld	(iy), l
	ld	(iy + 1), h
	ld.sis	de, 45
	or	a, a
	sbc.sis	hl, de
	jq	nc, BB11_53
	ld	hl, -3
	push	hl
	call	_gfx_SetColor
	pop	hl
	call	_kb_Scan
	call	_DrawTitle
	ld	hl, -720868
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	cp	a, 64
	jq	z, BB11_53
	ld	hl, _x
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	inc.sis	hl
	jq	BB11_151
BB11_106:
	ld	l, e
	ld	h, d
	ld.sis	bc, 3
	or	a, a
	sbc.sis	hl, bc
	jq	nz, BB11_108
	ex	de, hl
	ld	e, iyl
	ld	d, iyh
	ex	de, hl
	ld.sis	bc, 15
	or	a, a
	sbc.sis	hl, bc
	jq	c, BB11_113
BB11_108:
	ld	l, e
	ld	h, d
	ld.sis	bc, 4
	or	a, a
	sbc.sis	hl, bc
	jq	nz, BB11_110
	ex	de, hl
	ld	e, iyl
	ld	d, iyh
	ex	de, hl
	ld.sis	bc, -2
	add.sis	hl, bc
	ld.sis	bc, 13
	jq	BB11_112
BB11_110:
	ld	l, e
	ld	h, d
	ld.sis	bc, 5
	or	a, a
	sbc.sis	hl, bc
	jq	nz, BB11_117
	ex	de, hl
	ld	e, iyl
	ld	d, iyh
	ex	de, hl
	ld.sis	bc, 15
BB11_112:
	or	a, a
	sbc.sis	hl, bc
	jq	nc, BB11_117
BB11_113:
	ld	hl, _credits
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	(ix + -3), l
	ld	(ix + -2), h
	ld	hl, _chip
	ld	c, (hl)
	inc	hl
	ld	b, (hl)
	ld	l, (ix + -3)
	ld	h, (ix + -2)
	ld	(ix + -6), c
	ld	(ix + -5), b
	or	a, a
	sbc.sis	hl, bc
	jq	c, BB11_117
	or	a, a
	sbc	hl, hl
	push	hl
	pop	bc
	ld	l, (ix + -6)
	ld	h, (ix + -5)
	ld	c, l
	ld	b, h
	ld	(ix + -9), bc
	or	a, a
	sbc	hl, hl
	ex	de, hl
	ld	e, iyl
	ld	d, iyh
	ex	de, hl
	ld	bc, 3
	call	__imulu
	push	hl
	pop	bc
	or	a, a
	sbc	hl, hl
	ld	l, e
	ld	h, d
	ld	de, -9
	add	hl, de
	add	hl, bc
	add	hl, hl
	ex	de, hl
	ld	iy, _bets
	add	iy, de
	or	a, a
	sbc	hl, hl
	ld	l, (iy)
	ld	h, (iy + 1)
	ld	de, (ix + -9)
	add	hl, de
	push	hl
	pop	bc
	ld	de, 51
	or	a, a
	sbc	hl, de
	jq	nc, BB11_117
	ld	(iy), c
	ld	(iy + 1), b
	ld	l, (ix + -3)
	ld	h, (ix + -2)
	ld	e, (ix + -6)
	ld	d, (ix + -5)
	or	a, a
	sbc.sis	hl, de
	ld	iy, _credits
	jq	BB11_116
BB11_154:
	ld	hl, -720868
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	cp	a, 64
	jq	z, BB11_163
	ld	hl, -851900
	push	hl
	pop	iy
	ld	hl, (iy)
	ld	a, (iy + 3)
	push	hl
	call	_srand
	pop	hl
	ld	hl, -3
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, 220
	push	hl
	ld	hl, 155
	push	hl
	ld	hl, 10
	push	hl
	ld	hl, 160
	push	hl
	call	_gfx_FillRectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	call	_DrawTitle
	call	_DrawMenu
	ld	hl, 167
	push	hl
	ld	hl, 163
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, _chip
	push	hl
	pop	iy
	or	a, a
	sbc	hl, hl
	ex	de, hl
	ld	e, (iy)
	ld	d, (iy + 1)
	ld	hl, 2
	push	hl
	push	de
	call	_gfx_PrintInt
	pop	hl
	pop	hl
	ld	hl, _chip
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	de, 0
	ld	e, l
	ld	d, h
	ld	(ix + -3), de
	ld	hl, 170
	push	hl
	ld	hl, 187
	push	hl
	push	de
	call	_DrawChip
	pop	hl
	pop	hl
	pop	hl
	call	_PrintCredits
	call	_PrintNumber
	call	_DrawCursor
	call	_createTableau
	call	_DrawButtons
	ld	hl, (_rotate_sprite)
	ld	de, 69
	push	de
	ld	de, 17
	push	de
	push	hl
	call	_gfx_TransparentSprite_NoClip
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 36
	push	hl
	ld	hl, 59
	push	hl
	ld	hl, _pfeil_data
	push	hl
	call	_gfx_RLETSprite_NoClip
	pop	hl
	pop	hl
	pop	hl
	call	_gfx_SwapDraw
	ld	hl, -3
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, 220
	push	hl
	ld	hl, 155
	push	hl
	ld	hl, 10
	push	hl
	ld	hl, 160
	push	hl
	call	_gfx_FillRectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	call	_DrawTitle
	call	_DrawMenu
	ld	hl, 167
	push	hl
	ld	hl, 163
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, _chip
	ld	de, (ix + -3)
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	hl, 2
	push	hl
	push	de
	call	_gfx_PrintInt
	pop	hl
	pop	hl
	ld	hl, _chip
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	de, 0
	ld	e, l
	ld	d, h
	ld	hl, 170
	push	hl
	ld	hl, 187
	push	hl
	push	de
	call	_DrawChip
	pop	hl
	pop	hl
	pop	hl
	call	_PrintCredits
	call	_PrintNumber
	call	_DrawCursor
	call	_createTableau
	call	_DrawButtons
	ld	hl, (_rotate_sprite)
	ld	de, 69
	push	de
	ld	de, 17
	push	de
	push	hl
	call	_gfx_TransparentSprite_NoClip
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 36
	push	hl
	ld	hl, 59
	push	hl
	ld	hl, _pfeil_data
	push	hl
	call	_gfx_RLETSprite_NoClip
	pop	hl
	pop	hl
	pop	hl
	call	_gfx_SwapDraw
	ld.sis	hl, -15536
	ld	iy, _b
	ld	(iy), l
	ld	(iy + 1), h
	call	_rand
	ld	bc, 256
	call	__irems
	ld	iy, _s
	ld	(iy), l
	ld	(iy + 1), h
	ld.sis	de, 0
	ld	hl, _f
	ld	(hl), e
	inc	hl
	ld	(hl), d
BB11_156:
	or	a, a
	ld	l, e
	ld	h, d
	ld.sis	bc, 1
	adc.sis	hl, bc
	ld	iy, _x
	ld	(iy), l
	ld	(iy + 1), h
	or	a, a
	ld	l, e
	ld	h, d
	ld.sis	de, 1
	adc.sis	hl, de
	jq	c, BB11_1
	call	_kb_Scan
	ld	hl, -720868
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	cp	a, 64
	jq	z, BB11_162
	call	_rand
	ld	bc, 1000
	call	__irems
	push	hl
	pop	de
	ld	hl, _b
	push	hl
	pop	iy
	ld	l, (iy)
	ld	h, (iy + 1)
	or	a, a
	sbc.sis	hl, de
	ld	e, l
	ld	d, h
	ld	(iy), e
	ld	(iy + 1), d
	ld	a, (_a)
	ld.sis	bc, 5000
	call	__sdivu
	add	a, l
	ld	c, a
	ld	(_a), a
	ld	l, e
	ld	h, d
	ld.sis	de, 2000
	or	a, a
	sbc.sis	hl, de
	jq	c, BB11_1
	ld	a, (_s)
	ld	l, a
	ld	a, c
	add	a, l
	ld	l, a
	ld	(_n), a
	ld	de, (_rotate_sprite)
	ld	bc, 64
	push	bc
	push	hl
	push	de
	ld	hl, _ro_data
	push	hl
	call	_gfx_RotateScaleSprite
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, -3
	push	hl
	call	_gfx_SetColor
	pop	hl
	call	_DrawTitle
	call	_DrawMenu
	ld	hl, (_rotate_sprite)
	ld	de, 69
	push	de
	ld	de, 17
	push	de
	push	hl
	call	_gfx_TransparentSprite_NoClip
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 36
	push	hl
	ld	hl, 59
	push	hl
	ld	hl, _pfeil_data
	push	hl
	call	_gfx_RLETSprite_NoClip
	pop	hl
	pop	hl
	pop	hl
	call	_gfx_SwapDraw
	ld	a, (_n)
	ld	b, a
	ld	c, 7
	call	__bdivu
	ld	de, 0
	ld	e, a
	ld	hl, L___const.main.colors
	add	hl, de
	ld	a, (hl)
	ld	b, 0
	ld	c, a
	ld	hl, _c
	ld	(hl), c
	inc	hl
	ld	(hl), b
	ld	hl, L___const.main.numbers
	add	hl, de
	ld	a, (hl)
	ld	c, a
	ld	hl, _e
	ld	(hl), c
	inc	hl
	ld	(hl), b
	call	_PrintNumber
	ld	hl, _x
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	jq	BB11_156
BB11_162:
	ld.sis	hl, 1
	ld	iy, _f
	ld	(iy), l
	ld	(iy + 1), h
	jq	BB11_1
BB11_163:
	ld	hl, L_.str.17
	push	hl
	ld	hl, L_.str.15
	push	hl
	call	_ti_Open
	ld	e, a
	ld	(ix + -3), de
	pop	hl
	pop	hl
	push	de
	ld	hl, 1
	push	hl
	inc	hl
	push	hl
	ld	hl, _credits
	push	hl
	call	_ti_Write
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix + -3)
	push	hl
	call	_ti_Close
	ld	sp, ix
	pop	ix
	jp	_gfx_End
	section	.text,"ax",@progbits
	section	.rodata,"a",@progbits
lJTI11_0:
	private	LJTI11_0
LJTI11_0:
	dl	BB11_18
	dl	BB11_20
	dl	BB11_22
	dl	BB11_14
	dl	BB11_25
	dl	BB11_27

	section	.bss,"aw",@nobits
	public	_rotate_sprite_data
_rotate_sprite_data:
	rb	13691

	section	.data,"aw",@progbits
	public	_rotate_sprite
_rotate_sprite:
	dl	_rotate_sprite_data

	section	.bss,"aw",@nobits
	public	_bets
_bets:
	rb	100

	section	.rodata,"a",@progbits
	private	L_.str
L_.str:
	db	"Roulette v0.4.0",000o

	section	.rodata,"a",@progbits
	private	L_.str.1
L_.str.1:
	db	"Add Credits",000o

	section	.bss,"aw",@nobits
	public	_menu
_menu:
	rb	2

	section	.rodata,"a",@progbits
	private	L_.str.2
L_.str.2:
	db	"+10",000o

	section	.rodata,"a",@progbits
	private	L_.str.3
L_.str.3:
	db	"+20",000o

	section	.rodata,"a",@progbits
	private	L_.str.4
L_.str.4:
	db	"+50",000o

	section	.rodata,"a",@progbits
	private	L_.str.5
L_.str.5:
	db	"+100",000o

	section	.rodata,"a",@progbits
	private	L_.str.6
L_.str.6:
	db	"+200",000o

	section	.bss,"aw",@nobits
	public	_h
_h:
	rb	2

	section	.bss,"aw",@nobits
	public	_i
_i:
	rb	2

	section	.bss,"aw",@nobits
	public	_l
_l:
	rb	2

	section	.bss,"aw",@nobits
	public	_posx
_posx:
	rb	2

	section	.bss,"aw",@nobits
	public	_posy
_posy:
	rb	2

	section	.bss,"aw",@nobits
	public	_c
_c:
	rb	2

	section	.bss,"aw",@nobits
	public	_e
_e:
	rb	2

	section	.bss,"aw",@nobits
	public	_color
_color:
	rb	2

	section	.bss,"aw",@nobits
	public	_k
_k:
	rb	2

	section	.rodata,"a",@progbits
	private	L_.str.7
L_.str.7:
	db	"Spin",000o

	section	.rodata,"a",@progbits
	private	L_.str.8
L_.str.8:
	db	"1",000o

	section	.rodata,"a",@progbits
	private	L_.str.9
L_.str.9:
	db	"2",000o

	section	.rodata,"a",@progbits
	private	L_.str.10
L_.str.10:
	db	"5",000o

	section	.rodata,"a",@progbits
	private	L_.str.11
L_.str.11:
	db	"10",000o

	section	.rodata,"a",@progbits
	private	L_.str.12
L_.str.12:
	db	"20",000o

	section	.rodata,"a",@progbits
	private	L_.str.13
L_.str.13:
	db	"50",000o

	section	.bss,"aw",@nobits
	public	_chipa
_chipa:
	rb	2

	section	.bss,"aw",@nobits
	public	_chipb
_chipb:
	rb	2

	section	.bss,"aw",@nobits
	public	_m
_m:
	rb	2

	section	.bss,"aw",@nobits
	public	_p
_p:
	rb	2

	section	.bss,"aw",@nobits
	public	_o
_o:
	rb	2

	section	.bss,"aw",@nobits
	public	_chip
_chip:
	rb	2

	section	.bss,"aw",@nobits
	public	_credits
_credits:
	rb	2

	section	.rodata,"a",@progbits
	private	L_.str.14
L_.str.14:
	db	"Credits: ",000o

	section	.rodata,"a",@progbits
	private	L___const.main.colors
L___const.main.colors:
	db	"",376o,374o,376o,374o,376o,374o,376o,374o,376o,374o,376o,374o,376o,374o,376o,374o,376o,374o,376o,374o,376o,374o,376o,374o,376o,374o,376o,374o,376o,374o,376o,374o,376o,374o,376o,374o,373o

	section	.rodata,"a",@progbits
	private	L___const.main.numbers
L___const.main.numbers:
	db	"",032o,003o,"#",014o,034o,007o,035o,022o,026o,011o,037o,016o,024o,001o,"!",020o,030o,005o,012o,027o,010o,036o,013o,"$",015o,033o,006o,"""",021o,031o,002o,025o,004o,023o,017o," ",000o

	section	.rodata,"a",@progbits
	private	L_.str.15
L_.str.15:
	db	"ROULSV",000o

	section	.rodata,"a",@progbits
	private	L_.str.16
L_.str.16:
	db	"r",000o

	section	.bss,"aw",@nobits
	public	_s
_s:
	rb	2

	section	.bss,"aw",@nobits
	public	_a
_a:
	rb	1

	section	.bss,"aw",@nobits
	public	_x
_x:
	rb	2

	section	.bss,"aw",@nobits
	public	_b
_b:
	rb	2

	section	.bss,"aw",@nobits
	public	_f
_f:
	rb	2

	section	.bss,"aw",@nobits
	public	_n
_n:
	rb	1

	section	.rodata,"a",@progbits
	private	L_.str.17
L_.str.17:
	db	"w",000o

	section	.bss,"aw",@nobits
	public	_y
_y:
	rb	2

	section	.bss,"aw",@nobits
	public	_z
_z:
	rb	2

	section	.bss,"aw",@nobits
	public	_g
_g:
	rb	2

	section	.bss,"aw",@nobits
	public	_j
_j:
	rb	2

	section	.bss,"aw",@nobits
	public	_v
_v:
	rb	2

	section	.bss,"aw",@nobits
	public	_t
_t:
	rb	2

	section	.bss,"aw",@nobits
	public	_u
_u:
	rb	2

	section	.bss,"aw",@nobits
	public	_key
_key:
	rb	1

	ident	"clang version 12.0.0 (https://github.com/jacobly0/llvm-project 170be88120e3aa88c20eea5615ba76b8f1d6c647)"
	extern	__Unwind_SjLj_Register
	extern	_srand
	extern	_gfx_SetTextFGColor
	extern	_gfx_Begin
	extern	_gfx_SetPalette
	extern	_rand
	extern	_ti_Close
	extern	__sand
	extern	_gfx_PrintString
	extern	_ti_Read
	extern	_gfx_PrintInt
	extern	_gfx_FillRectangle
	extern	__smulu
	extern	_tableau_data
	extern	__sremu
	extern	_ti_Open
	extern	_gfx_FillCircle
	extern	__bdivu
	extern	_ro_data
	extern	__frameset
	extern	_kb_Scan
	extern	_palette_gfx
	extern	_gfx_RotateScaleSprite
	extern	_ti_Write
	extern	_gfx_RLETSprite_NoClip
	extern	_gfx_SwapDraw
	extern	_gfx_SetDraw
	extern	_pfeil_data
	extern	__sdivu
	extern	_ti_CloseAll
	extern	_gfx_FillScreen
	extern	__Unwind_SjLj_Unregister
	extern	__irems
	extern	__imulu
	extern	_gfx_SetColor
	extern	_gfx_Rectangle
	extern	_gfx_TransparentSprite_NoClip
	extern	_gfx_End
	extern	_gfx_SetTextXY
	extern	_gfx_SetTextScale
